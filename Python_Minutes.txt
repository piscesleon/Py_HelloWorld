Python 3

. 基础

.. py 与 pyw
pyw 扩展名意味着 Python运行该程序时， 不会显示终端窗口

.. 数学操作符
** 指数 2 ** 3 8
% 取模/取余数 22 % 8 6
// 整除/商数取整 22 // 8 2
/ 除法 22 / 8 2.75
* 乘法 3 * 5 15
- 减法 5 - 2 3
+ 加法 2 + 2 4

.. 比较操作符
==
!=
<
>
<=
>=

.. 布尔操作符
not
and
or

.. 变量
区分大小写

... 声明全局变量
global

def spam():
 global eggs
 eggs = 'spam'
eggs = 'global'
spam()
print(eggs)

.. 检查数据类型
type()


.. 注释：
# 开头

... 多行注释
可用三重引号的字符串，表示多行注释

.. 输入与输出
input()
print()

.. 字符串
... 字符长度
len()

.. 显式转换
int()  可对浮点数进行向下取整
str()
float()

.. 布尔值
True
False

0, 0.0, '' 被认为是 False

.. None值
表示没有值
None是NoneType的唯一值

对于所有没有 return 语句的函数定义， Python 都会在末尾加上 returnNone。这类似于 while 或 for 循环隐式地以 continue 语句结尾。而且，如果使用不带值的 return 语句（ 也就是只有 return 关键字本身）， 那么就返回 None。

>>> spam = print('Hello!')
Hello!
>>> None == spam
True

.. 增强型赋值
spam += 1 即 spam = spam + 1
spam -= 1 即 spam = spam - 1
spam *= 1 即 spam = spam * 1
spam /= 1 即 spam = spam / 1
spam %= 1 即 spam = spam % 1

.. 续行字符 \
加在行末尾，表示本行未结束

.. 代码块
以缩进代表代码块
代码块可以嵌套

.. 条件判断
if name=='Mary':
  print('Mary')
elif name=='Leon':
  print('Leon')
elif name=='Leon2':
  print('Leon2')
else:
 print('Other')

.. 循环
... 跳出循环
break
可在while和for内部使用

... 再次开始循环
continue
可在while和for内部使用

... while
while spam<5:
  print('Hello')
  spam=spam+1

... for
print('My name is')
for i in range(5):
  print('Jimmy Five Times (' + str(i) + ')')

第1次运行时， i 被设置为0。 即初始值从0开始

.. 导入模块
import random
import math
import random, os, sys, math

.. 提前结束程序
sys.exit()

. 函数
.. 定义函数
def functionName():

.. 带参数的函数
def hello(name):
  print('Hello' + name)

hello('Leon')

.. 带返回值的函数
可以用 return 定义返回的值或表达式

.. 异常处理
try...except

把可能出错的语句放在try中，如果错误发生，就执行except

... 错误信息
ZeroDivisionError 除0错误
IndexError 下标错误

. 方法

与函数是一回事，但是调用在一个值上
.. 例：列表的方法
index()

spam.index('hello')
即取'hello'在spam中的位置

. 列表
用 [] 括起，各项目间用 , 分隔

列表变量，实际存储的是列表的“引用”地址

列表中的各表项，可以是不同类型的值

可用下标获取列表中的值，下标以0开始

>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[0]
'cat'

.. 列表可以嵌套
>>> spam = [['cat', 'bat'], [10, 20, 30, 40, 50]]
>>> spam[0]
['cat', 'bat']
>>> spam[0][1]
'bat'
>>> spam[1][4]
50

.. 负数下标
-1 指列表中最后一个值
-2 指列表中倒数第2个值

.. 切片
从列表中取得多个值，形成新列表
spam[1:4]
切片的终止值，并不包含在切片中

.. 列表的长度
可以用len()获取

.. 列表的连接与复制
+ 用于连接列表
* 用于复制列表，并形成新的列表

>>> [1, 2, 3] + ['A', 'B', 'C']
[1, 2, 3, 'A', 'B', 'C']
>>> ['X', 'Y', 'Z'] * 3
['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']


... 技巧
可以先新建一个空的列表，通过循环添加列表值，避免建立固定数量多个变量

.. 从列表中删除值
del spam[2]

同时 del 也可用于释放变量

.. in 和 not in 操作符
用于确定某一值是否在列表中

.. 多重赋值
>>> cat = ['fat', 'black', 'loud']
>>> size, color, disposition = cat

即分别赋值size='fat', color='black', disposition='loud'

.. 列表的方法

... index()
spam.index('hello')
取'hello'在列表spam中的位置

... append(), insert() 在列表中添加值
append() 在列表尾添加值
insert(n,value) 在列表位置n处插入值value

... remove() 在列表中删除值，通过指定值的内容
spam.remove('hello')
若该值在列表中出现多次，只会删除第1个相同的值

... del() 在列表中删除值，通过指定值的位置
spam.del(3)

... sort() 将列表中的值排序
spam.sort()
执行后，按从小到大的顺序排列spam列表，并保存在spam中

spam.sort(reverse=True) 则按从大到小的顺序进行排序

注意：无法对混合类型（数字+字符）的列表进行排序

.... 排序时若需要对大小写不敏感
默认排序下，大写字母 小于 小写字母
spam.sort(key=str.lower)
将按全部字母小写来进行排序，但并不会改变列表中的实际值


. 字符串和元组： 类似列表的存在
字符串可以视作单个文本字符的列表，也可以用列表的 方法 来进行操作

.. 字符串与列表的区别
字符串是 不可变 数据类型
列表是 可变 数据类型

.. 元组
元组使用 () 而非 []
>>> eggs = ('hello', 42, 0.5)
>>> eggs[0]
'hello'

... 注： 元组是“不可变”数据类型
即：值不可被添加、修改、删除

如果元组中只有一个值， 你可以在括号内该值的后面跟上一个逗号， 表明这种情况。 否则， Python 将认为， 你只是在一个普通括号内输入了一个值。

.. 列表与元组的互相转换
list() 返回列表
tuple() 返回元组

.. 引用与值
列表变量实际是对列表的引用，若将一个列表变量赋值给另一个列表变量，改变列表值后，2个列表变量返回的值将同时发生改变，因为返回的是列表的引用，实际产生改变的是同一个列表

对于“可变”数据类型，保存的是“引用”
 - 列表、字典
对于“不可变”数据类型，保存的是“值”
 - 字符串、整型、元组

.. copy模块的copy()和deepcopy()
对于传入的列表或字典，有时候不希望一些变动影响原来的列表或字典。
>>> import copy
>>> spam = ['A', 'B', 'C', 'D']
>>> cheese = copy.copy(spam)
>>> cheese[1] = 42
>>> spam
['A', 'B', 'C', 'D']
>>> cheese
['A', 42, 'C', 'D']

如果要复制嵌套的列表，就使用deepcopy()来同时复制它们内部的列表

. 字典
用 {} 括起
字典是 索引+值 的组合，即 键-值 对
理解为： 字段名 + 单行内容

>>> myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'}
>>> myCat['size']
'fat'

>>> spam = {12345: 'Luggage Combination', 42: 'The Answer'}

.. 字典与列表
字典中的表项是不排序的，即 键 无大小
>>> eggs = {'name': 'Zophie', 'species': 'cat', 'age': '8'}
>>> ham = {'species': 'cat', 'age': '8', 'name': 'Zophie'}
>>> eggs == ham
True

字典无序，所以无法切片

... 在字典中添加 键-值
birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}
print(birthdays)
birthdays['Additional']='Added Date'
print(birthdays)

.. 字典的keys(), values(), items()方法

分别返回字典的键、值和键-值对，这些方法返回的值不是真正的列表，它们不能被修改。但这些数据类型（分别是 dict_keys、 dict_values 和 dict_items）可以用于for 循环。

>>> spam = {'color': 'red', 'age': 42}
>>> for v in spam.values():
print(v)

items()方法返回的 dict_items 值中，包含的是键和值的元组。
>>> for i in spam.items():
print(i)
('color', 'red')
('age', 42)

如果希望通过这些方法得到一个真正的列表，就把类似列表的返回值传递给 list函数。

>>> spam = {'color': 'red', 'age': 42}
>>> list(spam.keys())
['color', 'age']

可以在for中使用2个变量分别调用items()的 键 与 值
>>> spam = {'color': 'red', 'age': 42}
>>> for k, v in spam.items():
print('Key: ' + k + ' Value: ' + str(v))
Key: age Value: 42
Key: color Value: red

... 字典的get()方法
它有两个参数：要取得其值的键，以及如果该键不存在时，返回的备用值。
>>> picnicItems = {'apples': 5, 'cups': 2}
>>> 'I am bringing ' + str(picnicItems.get('cups', 0)) + ' cups.'
'I am bringing 2 cups.'
>>> 'I am bringing ' + str(picnicItems.get('eggs', 0)) + ' eggs.'
'I am bringing 0 eggs.'

... 字典的 setdefault() 方法
在字典中检查某个键是否存在，如果不存在则为其设置一个默认值
用于确保某个键能确实存在

>>> spam = {'name': 'Pooka', 'age': 5}
>>> spam.setdefault('color', 'black')
'black'
>>> spam
{'color': 'black', 'age': 5, 'name': 'Pooka'}
>>> spam.setdefault('color', 'white')
'black'
>>> spam
{'color': 'black', 'age': 5, 'name': 'Pooka'}

.. 用于字典的，更漂亮的打印模块 pprint
引入后，可以使用 pprint() 和 pformat()
pprint() 会按“键”进行排序，然后输出打印

import pprint
message = 'It was a bright cold day in April, and the clocks were striking thirteen.'
count = {}
for character in message:
    count.setdefault(character, 0)
    count[character] = count[character] + 1
pprint.pprint(count)
print(count)


如果字典本身包含嵌套的列表或字典， pprint.pprint()函数就特别有用。

.. 嵌套字典与列表

参见自己写的 totalBrought.py

. 字符串操作
单引号、双引号，均可用于表示字符串

.. 转义符表示字符串
当一个字符串中，即有单引号又需要有双引号时，要用转义符来表示其中的 ' 和 " 是字符串的组成部分之一
即以 \ 开头的单个字符
\'
\"
\t
\n
\\

.. 原始字符串 - 完全忽略转义符
在字符串开始前的引号前，加上r
>>> print(r'That is Carol\'s cat.')
That is Carol\'s cat.

.. 多行字符串
使用三重引号表示
print('''Dear Alice,
Eve's cat has been arrested for catnapping, cat burglary, and extortion.
Sincerely,
Bob''')

.. 字符串下标和切片
>>> spam = 'Hello world!'
>>> spam[0]
'H'
>>> spam[4]
'o'
>>> spam[-1]
'!'
>>> spam[0:5]
'Hello'
>>> spam[:5]
'Hello'
>>> spam[6:]
'world!'

字符串切片并没有修改原来的字符串。

.. 字符串可用 in 和 not in 判断
大小写敏感

.. 字符串方法
... upper()
转换为大写

... lower()
转换为小写

... isupper()
判断是否有字母，且字母均为大写

... islower()
判断是否有字母，且字母均为小写

... isalpha()
是否只包含字母，且非空

... isalnum()
是否只包含字母和数字，且非空

... isdecimal()
是否只包含数字字符，且非空

... isspace()
是否只包含空格、制表符、和换行，且非空

... istitle()
是否字符串中所有单词均为首字母大写，其他字母小写
可以包含数字字符

... startswith()
检查字符串是否以某字串起始
>>> 'Hello world!'.startswith('Hello')
True
>>> 'abc123'.startswith('abcdef')
False

... endswith()
检查字符串是否以某字串结束

... join()
连接字符串
调用 join()方法的字符串， 被插入到列表参数中每个字符串的中间。例如，如果在', '字符串上调用 join(['cats', 'rats', 'bats'])， 返回的字符串就是'cats, rats, bats'
>>> ', '.join(['cats', 'rats', 'bats'])
'cats, rats, bats'
>>> ' '.join(['My', 'name', 'is', 'Simon'])
'My name is Simon'
>>> 'ABC'.join(['My', 'name', 'is', 'Simon'])
'MyABCnameABCisABCSimon

... spilit()
分割字符串，成为一个列表
>>> 'My name is Simon'.split()
['My', 'name', 'is', 'Simon']

默认情况下，字符串'My name is Simon'按照各种空白字符分割， 诸如空格、 制表符或换行符。

也可以向 split()方法传入一个分割字符串， 指定它按照不同的字符串分割。
>>> 'MyABCnameABCisABCSimon'.split('ABC')
['My', 'name', 'is', 'Simon']

... rjust()
通过填充空格，实现向右对齐
也可以用字符参数来替代空格
>>> 'Hello World'.rjust(20)
'               Hello World'

>>> 'Hello'.rjust(20, '*')
'***************Hello'

... ljust()
通过填充空格，实现向左对齐

... center()
通过填充空格，实现居中对齐
>>> 'Hello'.center(20, '=')
'=======Hello========'

... rstrip()
删除字符串右边的空白字符（空格、制表符、换行符）

... lstrip
删除字符串左边的空白字符（空格、制表符、换行符）

... strip()
删除字符串两边的空白字符（空格、制表符、换行符）

>>> spam = 'SpamSpamBaconSpamEggsSpamSpam'
>>> spam.strip('ampS')
'BaconSpamEggs'
向 strip()方法传入参数'ampS'， 告诉它在变量中存储的字符串两端， 删除出现的a、 m、 p 和大写的 S。传入 strip()方法的字符串中， 字符的顺序并不重要： strip('ampS')做的事情和 strip('mapS')或 strip('Spam')一样。

... pyperclip 模块，拷贝粘贴字符串 （非自带模块，需要安装）
该模块有  copy() paste() 函数
>>> import pyperclip
>>> pyperclip.copy('Hello world!')
>>> pyperclip.paste()
'Hello world!'

.. 项目： 口令箱，密码箱 (pw.py)
... 处理命令行参数
命令行参数将存储在变量 sys.argv 中
sys.argv 列表中的第一项总是一个字符串，它包含程序的文件名（ 'pw.py'）。第二项应该是第一个命令行参数。


. 正则表达式
简称regex
\d 一个数字
\D 除数字以外的任意字符
\w 任何字母、数字、或下划线
\W 除\w以外的任何字符
\s 空格、制表符、换行符
\S 除\s以外的任何字符
[0-5] 只匹配数字0到5, 即字符分类
[a-zA-Z0-9]将匹配所有小写字母、 大写字母和数字
在方括号内，普通的正则表达式符号不会被解释。
{3} 把某个模式匹配3次
通过在字符分类的左方括号后加上一个插入字符（ ^）， 就可以得到“ 非字符类”。非字符类将匹配不在这个字符类中的所有字符。例如consonantRegex = re.compile(r'[^aeiouAEIOU]')

?匹配零次或一次前面的分组。
*匹配零次或多次前面的分组。
+匹配一次或多次前面的分组。
{n}匹配 n 次前面的分组。
{n,}匹配 n 次或更多前面的分组。
{,m}匹配零次到 m 次前面的分组。
{n,m}匹配至少 n 次、至多 m 次前面的分组。
{n,m}?或*?或+?对前面的分组进行非贪心匹配。
^spam 意味着字符串必须以 spam 开始。
spam$意味着字符串必须以 spam 结束。
.匹配所有字符，换行符除外。
\d、 \w 和\s 分别匹配数字、单词和空格。
\D、 \W 和\S 分别匹配出数字、单词和空格外的所有字符。
[abc]匹配方括号内的任意字符（诸如 a、 b 或 c）。
[^abc]匹配不在方括号内的任意字符。

\d{2} 即等同于 \d\d

.. 导出正则表达式模块
import re

.. 使用正则表达式

向 re.compile()传入一个字符串值，表示正则表达式，它将返回一个 Regex 模式对象（或者就简称为 Regex 对象）。
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
现在 phoneNumRegex 变量包含了一个 Regex 对象。

.. 匹配Regex对象 search()， 匹配第1个找到的对象
Regex 对象的 search()方法查找传入的字符串， 寻找该正则表达式的所有匹配。
如果字符串中没有找到该正则表达式模式， search()方法将返回 None。
如果找到了该模式，search()方法将返回一个 Match 对象。
Match 对象有一个 group()方法，它返回被查找字符串中实际匹配的文本（返回第1个匹配项）。
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneNumRegex.search('My number is 415-555-4242.')
>>> print('Phone number found: ' + mo.group())
Phone number found: 415-555-4242

.. 匹配所有Regex对象 findall()
利用 findall()方法，可以找到“所有”匹配的地方。
返回的是一个字符串列表


.. 利用括号分组
添加括号将在正则表达式中创建“ 分组”：(\d\d\d)-(\d\d\d-\d\d\d\d)。
正则表达式字符串中的第一对括号是第 1 组。第二对括号是第 2 组。
向 group()匹配对象方法传入整数 1 或 2， 就可以取得匹配文本的不同部分。 向 group()方法传入 0 或不传入参数， 将返回整个匹配的文本。
>>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My number is 415-555-4242.')
>>> mo.group(1)
'415'

如果想要一次就获取所有的分组， 请使用 groups()方法
>>> mo.groups()
('415', '555-4242')

.. 用管道符 | 匹配多个分组
表示“或”

.. 用问号实现可选匹配
有时候， 想匹配的模式是可选的。
字符?表明它前面的分组在这个模式中是可选的。
>>> batRegex = re.compile(r'Bat(wo)?man')
>>> mo1 = batRegex.search('The Adventures of Batman')
>>> mo1.group()
'Batman'
>>> mo2 = batRegex.search('The Adventures of Batwoman')
>>> mo2.group()
'Batwoman'

正则表达式中的(wo)?部分表明， 模式 wo 是可选的分组。

.. 用*匹配0次或多次
即星号之前的分组，可以在文本中出现任意次

.. 用+匹配1次或多次

.. 用{n}匹配n次

.. 用{a,b}匹配最小a次，最大b次

.. 匹配的模式
Python 的正则表达式默认是“ 贪心” 的， 这表示在有二义的情况下，它们会尽可能匹配最长的字符串。

.. 结束符 $
可以再正则表达式的末尾加上美元符号（ $），表示该字符串必须以这个正则表达式的模式结束。

正则表达式 r'^\d+$'匹配从开始到结束都是数字的字符串。

.. 通配符 .
匹配除了换行外的所有字符

.. 匹配任意文本
 .*

点-星将匹配除换行外的所有字符。通过传入 re.DOTALL 作为 re.compile()的第二个参数， 可以让句点字符匹配所有字符， 包括换行字符。
>>> newlineRegex = re.compile('.*', re.DOTALL)

.. 匹配时，不区分大小写
可以向 re.compile()传入 re.IGNORECASE 或 re.I，作为第二个参数。
>>> robocop = re.compile(r'robocop', re.I)

.. 替换字符串  sub() 方法
Regex对象的 sub()方法需要传入两个参数。第一个参数是一个字符串， 用于取代发现的匹配。第二个参数是一个字符串，即正则表达式。 sub()方法返回替换完成后的字符串。
>>> namesRegex = re.compile(r'Agent \w+')
>>> namesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')
'CENSORED gave the secret documents to CENSORED.'

>>> agentNamesRegex = re.compile(r'Agent (\w)\w*')
>>> agentNamesRegex.sub(r'\1****', 'Agent Alice told Agent Carol that Agent
Eve knew Agent Bob was a double agent.')
A**** told C**** that E**** knew B**** was a double agent.'

.. 管理复杂的正则表达式（添加注释）
可以告诉 re.compile()， 忽略正则表达式字符串中的空白符和注释， 从而缓解这一点。 要实现这种详细模式， 可以向 re.compile()传入变量 re.VERBOSE， 作为第二个参数。

phoneRegex = re.compile(r'''(
	(\d{3}|\(\d{3}\))? # area code
	(\s|-|\.)? # separator
	\d{3} # first 3 digits
	(\s|-|\.) # separator
	\d{4} # last 4 digits
	(\s*(ext|x|ext.)\s*\d{2,5})? # extension
	)''', re.VERBOSE)
请注意， 前面的例子使用了三重引号('")， 创建了一个多行字符串。这样就可以将正则表达式定义放在多行中， 让它更可读。


.. 组合使用 re.IGNOREC ASE、 re.DOTALL 和 re.VERBOSE
如果希望正则表达式不区分大小写， 并且句点字符匹配换行
>>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL)
使用第二个参数的全部 3 个选项， 看起来像这样
>>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL | re.VERBOSE)



. 读写文件
在 Windows 上， 路径书写使用倒斜杠作为文件夹之间的分隔符。但在 OS X 和Linux 上， 使用正斜杠作为它们的路径分隔符。如果想要程序运行在所有操作系统上，在编写 Python 脚本时， 就必须处理这两种情况。

.. 不同系统上使用正确的路径
用 os.path.join()函数来做这件事很简单。如果将单个文件和路径上的文件夹名称的字符串传递给它， os.path.join()就会返回一个文件路径的字符串， 包含正确的路径分隔符。
>>> import os
>>> os.path.join('usr', 'bin', 'spam')
'usr\\bin\\spam'

.. 当前目录 os.getcwd()
cwd: 当前工作目录 current working direction

.. 改变当前目录 os.chdir()
>>> import os
>>> os.getcwd()
'C:\\Python34'
>>> os.chdir('C:\\Windows\\System32')
>>> os.getcwd()
'C:\\Windows\\System32'

.. 绝对路径、相对路径
 .
 .\
 ..
 ..\

.. 创建文件夹 os.makrdirs()
>>> os.makedirs('C:\\delicious\\walnut\\waffles')
该函数会创建所有必要的中间文件夹

.. os.path 模块
os.path.join() 构建所有操作系统上都有效的路径
os.path 模块的完整文档在 Python网站上： http://docs.python.org/3/library/os.path.html

... os.path.abspath(path) 返回参数的绝对路径的字符串
用于将相对路径转换为绝对路径

... os.path.isabs(path) 判断是否为绝对路径

... os.path.relpath(path, start) 返回从start路径到path的相对路径的字符串。
如果没有提供 start ，就用当前工作目录为开始路径
>>> os.path.relpath('C:\\Windows', 'C:\\spam\\eggs')
'..\\..\\Windows'

... 获取路径名、文件名 os.path.dirname(path), os.path.basename(path)
>>> path = 'C:\\Windows\\System32\\calc.exe'
>>> os.path.basename(path)
'calc.exe'
>>> os.path.dirname(path)
'C:\\Windows\\System32'

... 同时获取路径与文件名，并存储为元组 os.path.split()
>>> calcFilePath = 'C:\\Windows\\System32\\calc.exe'
>>> os.path.split(calcFilePath)
('C:\\Windows\\System32', 'calc.exe')

split()字符串方法将返回一个列表， 包含该路径的所有部分。如果向它传递os.path.sep， 就能在所有操作系统上工作。
 - [ref to Python编程快速上手 让繁琐工作自动化 137 (163 / 409)]

... 文件大小 os.path.getsize(path)
返回path中文件的字节数
.... os.listdir(path) 返回文件名字符串的列表
.... 获取文件夹下所有文件的总大小
>>> totalSize = 0
>>> for filename in os.listdir('C:\\Windows\\System32'):
totalSize = totalSize + os.path.getsize(os.path.join('C:\\Windows\\System32', filename))
>>> print(totalSize)
1117846456

... 检查路径与文件有效性 os.path.exists(path)
可用于确定DVD或U盘是否连接在计算机上

... 检查路径有效性 os.path.isdir(path)
... 检查文件有效性 os.path.isfile(path)

.. 文本文件读写过程

... 读写文件的步骤
1, 调用open()函数，返回一个File对象
2, 调用File对象的read(), write()方法
3, 调用File对象的close()方法

.... 打开文件默认使用“读”模式 r
该模式下打开的文件，内容不可作变更
>>> helloFile = open('/Users/your_home_folder/hello.txt')
>>> helloContent = helloFile.read()
返回的是文件内容的单一字符串

.... 写模式打开文件 w
写模式，是完全覆盖
>>> baconFile = open('bacon.txt', 'w')
>>> baconFile.write('Hello world!\n')
13
>>> baconFile.close()

.... 追加模式打开文件 a
追加模式，是在原有文件后面，追加文本内容
>>> baconFile = open('bacon.txt', 'w')
>>> baconFile.write('Hello world!\n')
13
>>> baconFile.close()
>>> baconFile = open('bacon.txt', 'a')
>>> baconFile.write('Bacon is not a vegetable.')
25
>>> baconFile.close()
>>> baconFile = open('bacon.txt')
>>> content = baconFile.read()
>>> baconFile.close()
>>> print(content)
Hello world!
Bacon is not a vegetable.


.... 按行读文件 readlines()
>>>helloContent = helloFile.readlines()
每个字符串值都以一个换行字符\n 结束。除了文件的最后一行。

.. 二进制文件读写 shelve模块 (不必指定读写模式，打开后即可读可写)
可用于保存程序中的变量
利用 shelve 模块， 你可以将 Python 程序中的变量保存到二进制的 shelf 文件中。
>>> import shelve
>>> shelfFile = shelve.open('mydata') # 会建立一个mydata.dat
>>> cats = ['Zophie', 'Pooka', 'Simon']
>>> shelfFile['cats'] = cats #写入后，会多一个mydata.dir
>>> shelfFile.close() #Close后，会多一个mdata.bak


我们创建了一个列表 cats，并写下 shelfFile['cats'] =cats，将该列表保存在 shelfFile 中，作为键'cats'关联的值（就像在字典中一样）。然后我们在 shelfFile 上调用 close()。
在 Windows 上运行前面的代码， 你会看到在当前工作目录下有 3 个新文件：mydata.bak、 mydata.dat 和 mydata.dir。

程序稍后可以使用 shelve 模块， 重新打开这些文件并取出数据。 shelf 值不必用读模式或写模式打开，因为它们在打开后，既能读又能写。

>>> shelfFile = shelve.open('mydata')
>>> type(shelfFile)
<class 'shelve.DbfilenameShelf'>
>>> shelfFile['cats']
['Zophie', 'Pooka', 'Simon']
>>> shelfFile.close()

... shelf值的 keys() 和 values() 方法
类似字典一样可以使用keys(), values()方法返回“类似”列表的结果，然后传递给 list() 取得列表的值
>>> shelfFile = shelve.open('mydata')
>>> list(shelfFile.keys())
['cats']
>>> list(shelfFile.values())
[['Zophie', 'Pooka', 'Simon']]
>>> shelfFile.close()

.. 用pprint.pformat() 函数保存变量
pprint.pformat()函数将返回同样的文本字符串，但不是打印它。这个字符串不仅是易于阅读的格式， 同时也是语法上正确的 Python 代码。

pprint.pformat()函数将提供一个字符串， 你可以将它写入.py 文件。该文件将成为你自己的模块， 如果你需要使用存储在其中的变量， 就可以导入它。

所以pprint.pformat() 保存变量的文件需要/可以通过import来引用
>>> import pprint
>>> cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]
>>> pprint.pformat(cats)
"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"
>>> fileObj = open('myCats.py', 'w')
>>> fileObj.write('cats = ' + pprint.pformat(cats) + '\n')
83
>>> fileObj.close()

>>> import myCats
>>> myCats.cats
[{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]
>>> myCats.cats[0]
{'name': 'Zophie', 'desc': 'chubby'}
>>> myCats.cats[0]['name']
'Zophie

.. 随机取字典的 键值： random 模块
import random

random.sample(spam, 3) #在spam列表中，随机取3个值

. 文件操作（复制、移动、改名、删除）
shutil 模块
.. shutil.copy(source, destination) 复制文件
source 包含路径与文件名的字符串
destination 包含路径，如果包含文件名，会同时改名

.. shutil.copytree(source, destination) 复制整个文件夹

.. shutil.move(source, destination) 移动文件夹
注意：
1、 如果目的路径中已经有同名文件，会直接覆盖！！
2、 如果目标文件夹不存在，则会将源文件复制到目的地的上级目标处并命名为无后缀名的文件

.. 永久删除文件与文件夹
注：用os模块中的函数，可以删除一个文件或是一个空文件夹，但shutil支持同时删除一个文件夹及其所有内容

... os.unlink(path) 删除path处的文件
... os.rmdir(path) 删除path处的文件夹，且必须为空文件夹
... shutil.rmtree(path) 删除path处的文件夹及其下所有文件夹与文件


.. 删除到回收站
需要安装 pip install send2trash

>>> import send2trash
>>> baconFile = open('bacon.txt', 'a') # creates the file
>>> baconFile.write('Bacon is not a vegetable.')
25
>>> baconFile.close()
>>> send2trash.send2trash('bacon.txt')

.. 遍历目录树 os.walk()
遍历目录树， 处理遇到的每个文件
import os
for folderName, subfolders, filenames in os.walk('D:\\Project'): # 遍历所有文件夹、及子文件夹，并用for列出所有父子文件夹与文件名
    print('The current folder is ' + folderName)
    for subfolder in subfolders:
        print('SUBFOLDER OF ' + folderName + ': ' + subfolder)
    for filename in filenames:
        print('FILE INSIDE ' + folderName + ': '+ filename)
    print('')

.. zipfile 模块压缩文件
使用的是ZipFile对象
要读取ZIP文件内容，先要创建一个ZipFiel对象
... 创建一个ZipFile对象  zipfile.ZipFile() 函数
传入一个字符串，表示.zip文件名
zipfile是模块
ZipFile是函数
ZipFile有一个namelist()方法，获取zip文件包含的所有文件夹与文件名

>>> import zipfile, os
>>> os.chdir('C:\\') # move to the folder with example.zip
>>> exampleZip = zipfile.ZipFile('example.zip')
>>> exampleZip.namelist()
['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg']
>>> spamInfo = exampleZip.getinfo('spam.txt')
>>> spamInfo.file_size
13908
>>> spamInfo.compress_size
3828
 >>> 'Compressed file is %sx smaller!' % (round(spamInfo.file_size / spamInfo.compress_size, 2))
'Compressed file is 3.63x smaller!'
>>> exampleZip.close()

... 解压缩一个zip文件 extractall()
>>> import zipfile, os
>>> os.chdir('C:\\') # move to the folder with example.zip
>>> exampleZip = zipfile.ZipFile('example.zip')
>>> exampleZip.extractall()
>>> exampleZip.close()

... 解压缩一个zip文件中的一个文件 extract()
>>> exampleZip.extract('spam.txt')
'C:\\spam.txt'
>>> exampleZip.extract('spam.txt', 'C:\\some\\new\\folders')
'C:\\some\\new\\folders\\spam.txt'
>>> exampleZip.close()

... 创建和添加文件到zip文件
要创建你自己的压缩 ZIP 文件， 必须以“写模式”打开 ZipFile 对象，即传入'w'
使用ZipFile对象的write()可进行压缩
向 ZipFile 对象的 write()方法传入一个路径， Python 就会压缩该路径所指的文件， 将它加到 ZIP 文件中。
write()方法的第一个参数是一个字符串， 代表要添加的文件名。第二个参数是“压缩类型”参数，它告诉计算机使用怎样的算法来压缩文件。可以总是将这个值设置为 zipfile.ZIP_DEFLATED

>>> import zipfile
>>> newZip = zipfile.ZipFile('new.zip', 'w')
>>> newZip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)
>>> newZip.close()



. TODO
读取文件中，对不同编码格式的文件的读取，例如 UTF-8

. 安装第三方库
命令行方式下
# 安装剪贴板模块
pip install pyperclip
# 安装删除到回收站
pip install send2trash